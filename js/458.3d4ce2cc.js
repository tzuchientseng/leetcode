"use strict";(self["webpackChunkleetcode"]=self["webpackChunkleetcode"]||[]).push([[458],{4458:function(t,e,n){n.r(e),n.d(e,{default:function(){return v}});var l=n(641),i=n(33),s=n(953),o=n(8848),r=n.n(o);const a={class:"problem-detail"},d={key:0},c={class:"code-block"},u='\n/*\n  Time complexity: O(nlogn)ÔºàÊØèÊ¨°ÈÅûËø¥ log n Â±§ÔºåÊØèÂ±§ O(n) Âêà‰ΩµÔºâ\n  Space complexity: O(1)Ôºà‰ΩøÁî® next ÊåáÊ®ôÂéüÂú∞ÊéíÂ∫èÔºå‰ΩÜÈÅûËø¥Ê£ß‰ΩøÁî® O(log n)Ôºâ\n*/\nclass ListNode {\n  public val: number;\n  public next: ListNode | null;\n\n  constructor(val: number, next: ListNode | null = null) {\n    this.val = val;\n    this.next = next;\n  }\n\n  /* ------------------------------------------ create ------------------------------------------ */\n  public static create(values: number[]): ListNode | null {\n    const dummy = new ListNode(0);\n    let current = dummy;\n\n    values.forEach(value => {\n      current.next = new ListNode(value);\n      current = current.next;\n    });\n\n    return dummy.next;\n  }\n\n  /* ------------------------------------------ print ------------------------------------------ */\n  public static print(head: ListNode | null): void {\n    let current = head;\n    let result: number[] = [];\n\n    while (current !== null) {\n      result.push(current.val);\n      current = current.next;\n    }\n\n    console.log(result.join(" -> "));\n  }\n\n  /* ------------------------------------------ sortList (Merge Sort) ------------------------------------------ */\n    /* \n    üí°Concept\n      Step 1: Find the middle of the list\n      Step 2: Recursively sort both halves. Ë≥¶ÂÄº\n      Step 3: Merge the sorted halves\n    */\n  public static sortList(head: ListNode | null): ListNode | null {\n    if (!head || !head.next) return head; // Base case: empty or single node list\n\n    let mid: ListNode = ListNode.getMid(head);\n    let left: ListNode | null = head;\n    let right: ListNode | null = mid.next;\n    mid.next = null; // Split into two halves\n\n    left = ListNode.sortList(left);\n    right = ListNode.sortList(right);\n\n    return ListNode.merge(left, right);\n  }\n\n  /* ------------------------------------------ getMid (Find Middle Node) ------------------------------------------ */\n  private static getMid(head: ListNode): ListNode {\n    let slow = head;\n    let fast = head;\n\n    while (fast.next && fast.next.next) {\n      slow = slow.next!;\n      fast = fast.next.next;\n    }\n\n    return slow;\n  }\n\n  /* ------------------------------------------ merge (Merge Two Sorted Lists) ------------------------------------------ */\n  private static merge(left: ListNode | null, right: ListNode | null): ListNode | null {\n    let dummy = new ListNode(0);\n    let tail = dummy;\n\n    while (left && right) {\n      if (left.val < right.val) {\n        tail.next = left;\n        left = left.next;\n      } else {\n        tail.next = right;\n        right = right.next;\n      }\n      tail = tail.next;\n    }\n\n    // Append remaining nodes\n    tail.next = left || right;\n\n    return dummy.next;\n  }\n}\n\nconst linkedList = ListNode.create([4, 2, 1, 3]);\nconsole.log("Original List:");\nListNode.print(linkedList);\n\nconst sortedList = ListNode.sortList(linkedList);\nconsole.log("Sorted List:");\nListNode.print(sortedList);\n',L='\nconst linkedList = ListNode.create([4, 2, 1, 3]);\nconsole.log("Original List:");\nListNode.print(linkedList);\n\nconst sortedList = ListNode.sortList(linkedList);\nconsole.log("Sorted List:");\nListNode.print(sortedList);';var h=(0,l.pM)({__name:"SortList",setup(t){(0,l.sV)((()=>{r().highlightAll()}));const e=(0,s.KR)(!1),n=(0,s.KR)("Copy"),o=()=>{e.value=!e.value},h=async()=>{try{await navigator.clipboard.writeText(u),n.value="Copied!",setTimeout((()=>{n.value="Copy"}),1500)}catch(t){console.error("Failed to copy: ",t)}};return(t,s)=>((0,l.uX)(),(0,l.CE)("div",a,[(0,l.Lk)("button",{class:"close-btn",onClick:s[0]||(s[0]=e=>t.$emit("close"))},"√ó"),s[7]||(s[7]=(0,l.Lk)("h2",null,"148_Sort List",-1)),s[8]||(s[8]=(0,l.Lk)("a",{href:"https://leetcode.com/problems/sort-list/description/",target:"_blank"}," leetcode_148 ",-1)),s[9]||(s[9]=(0,l.Lk)("p",null,[(0,l.Lk)("strong",null,"ÂïèÈ°å:"),(0,l.eW)(" Áµ¶ÂÆö ")],-1)),e.value?((0,l.uX)(),(0,l.CE)("div",d,s[1]||(s[1]=[(0,l.Lk)("p",null," Â¶ÇÊûú ",-1)]))):(0,l.Q3)("",!0),(0,l.Lk)("button",{id:"toggleShowMoreButton",onClick:o},(0,i.v_)(e.value?"(Hide)":"Click to Show More ‚Üì"),1),s[10]||(s[10]=(0,l.Lk)("h3",null,"-- ÊàëÁöÑËß£Á≠î --",-1)),(0,l.Lk)("pre",c,[s[2]||(s[2]=(0,l.eW)("      ")),(0,l.Lk)("button",{class:"copy-btn",onClick:h},(0,i.v_)(n.value),1),s[3]||(s[3]=(0,l.eW)("\n      ")),(0,l.Lk)("code",{class:"language-javascript"},(0,i.v_)(u)),s[4]||(s[4]=(0,l.eW)("\n    "))]),s[11]||(s[11]=(0,l.Lk)("h3",null,"-- Ê∏¨Ë©¶Áî®‰æã --",-1)),(0,l.Lk)("pre",{class:"test-block"},[s[5]||(s[5]=(0,l.eW)("      ")),(0,l.Lk)("code",{class:"language-javascript"},(0,i.v_)(L)),s[6]||(s[6]=(0,l.eW)("\n    "))])]))}}),p=n(6262);const g=(0,p.A)(h,[["__scopeId","data-v-3bfc1429"]]);var v=g}}]);
//# sourceMappingURL=458.3d4ce2cc.js.map