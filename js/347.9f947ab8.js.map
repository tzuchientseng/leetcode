{"version":3,"file":"js/347.9f947ab8.js","mappings":"4MAGA,MAAMA,EAAa,CAAEC,MAAO,kBACtBC,EAAa,CAAEC,IAAK,GACpBC,EAAa,CAAEH,MAAO,cC8DtBI,EAAa,2gFAkGbC,EAAiB,6fDvCvB,OAA4BC,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,gBACRC,KAAAA,CAAMC,ICpFRC,EAAAA,EAAAA,KAAU,KACRC,IAAAA,cAAoB,IAGtB,MAAMC,GAAWC,EAAAA,EAAAA,KAAI,GACfC,GAAaD,EAAAA,EAAAA,IAAI,QAEjBE,EAAiBA,KACrBH,EAASI,OAASJ,EAASI,KAAK,EAG5BC,EAAkBC,UACtB,UACQC,UAAUC,UAAUC,UAAUjB,GACpCU,EAAWE,MAAQ,UACnBM,YAAW,KACTR,EAAWE,MAAQ,MAAM,GACxB,K,CACH,MAAOO,GACPC,QAAQC,MAAM,mBAAoBF,E,GD2FtC,MAAO,CAACG,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO9B,EAAY,EAC3D+B,EAAAA,EAAAA,IAAoB,SAAU,CAC5B9B,MAAO,YACP+B,QAASJ,EAAO,KAAOA,EAAO,GAAMK,GAAiBN,EAAKO,MAAM,WAC/D,KACHN,EAAO,KAAOA,EAAO,IAAKG,EAAAA,EAAAA,IAAoB,KAAM,KAAM,kBAAmB,IAC7EH,EAAO,KAAOA,EAAO,IAAKG,EAAAA,EAAAA,IAAoB,IAAK,CACjDI,KAAM,+CACNC,OAAQ,UACP,0BAA2B,IAC9BR,EAAO,KAAOA,EAAO,IAAKG,EAAAA,EAAAA,IAAoB,IAAK,KAAM,EACvDA,EAAAA,EAAAA,IAAoB,SAAU,KAAM,QACpCM,EAAAA,EAAAA,IAAiB,iDACf,IACHxB,EAASI,QACLY,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO5B,EAAY0B,EAAO,KAAOA,EAAO,GAAK,EAC9EG,EAAAA,EAAAA,IAAoB,IAAK,KAAM,+GAAgH,QAEjJO,EAAAA,EAAAA,IAAoB,IAAI,IAC5BP,EAAAA,EAAAA,IAAoB,SAAU,CAC5BQ,GAAI,uBACJP,QAAShB,IACRwB,EAAAA,EAAAA,IAAiB3B,EAASI,MAAQ,SAAW,wBAAyB,GACzEW,EAAO,MAAQA,EAAO,KAAMG,EAAAA,EAAAA,IAAoB,KAAM,KAAM,cAAe,KAC3EA,EAAAA,EAAAA,IAAoB,MAAO3B,EAAY,CACrCwB,EAAO,KAAOA,EAAO,IAAKS,EAAAA,EAAAA,IAAiB,YAC3CN,EAAAA,EAAAA,IAAoB,SAAU,CAC5B9B,MAAO,WACP+B,QAASd,IACRsB,EAAAA,EAAAA,IAAiBzB,EAAWE,OAAQ,GACvCW,EAAO,KAAOA,EAAO,IAAKS,EAAAA,EAAAA,IAAiB,cAC3CN,EAAAA,EAAAA,IAAoB,OAAQ,CAAE9B,MAAO,wBAAyBuC,EAAAA,EAAAA,IAAiBnC,IAC/EuB,EAAO,KAAOA,EAAO,IAAKS,EAAAA,EAAAA,IAAiB,aAE7CT,EAAO,MAAQA,EAAO,KAAMG,EAAAA,EAAAA,IAAoB,KAAM,KAAM,cAAe,KAC3EA,EAAAA,EAAAA,IAAoB,MAAO,CAAE9B,MAAO,cAAgB,CAClD2B,EAAO,KAAOA,EAAO,IAAKS,EAAAA,EAAAA,IAAiB,YAC3CN,EAAAA,EAAAA,IAAoB,OAAQ,CAAE9B,MAAO,wBAAyBuC,EAAAA,EAAAA,IAAiBlC,IAC/EsB,EAAO,KAAOA,EAAO,IAAKS,EAAAA,EAAAA,IAAiB,eAIjD,I,UE/LA,MAAMI,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://leetcode/./src/components/problems/PriorityQueue.vue?636a","webpack://leetcode/./src/components/problems/PriorityQueue.vue","webpack://leetcode/./src/components/problems/PriorityQueue.vue?faa1"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\"\n\nconst _hoisted_1 = { class: \"problem-detail\" }\nconst _hoisted_2 = { key: 0 }\nconst _hoisted_3 = { class: \"code-block\" }\n\nimport { ref, onMounted } from 'vue';\r\nimport Prism from 'prismjs';\r\n\r\nconst codeString = `\r\n/*\r\n  Time complexity:\r\n  Space complexity:\r\n*/\r\nclass PriorityQueue<T> {\r\n    private heap: { value: T; priority: number }[];\r\n\r\n    constructor() {\r\n        this.heap = [];\r\n    }\r\n\r\n    // 取得父節點索引\r\n    private getParentIndex(index: number): number {\r\n        return Math.floor((index - 1) / 2);\r\n    }\r\n\r\n    // 取得左子節點索引\r\n    private getLeftChildIndex(index: number): number {\r\n        return 2 * index + 1;\r\n    }\r\n\r\n    // 取得右子節點索引\r\n    private getRightChildIndex(index: number): number {\r\n        return 2 * index + 2;\r\n    }\r\n\r\n    // 交換兩個元素\r\n    private swap(i: number, j: number): void {\r\n        [this.heap[i], this.heap[j]] = [this.heap[j], this.heap[i]];\r\n    }\r\n\r\n    // 插入新元素\r\n    enqueue(value: T, priority: number): void {\r\n        const newNode = { value, priority };\r\n        this.heap.push(newNode);\r\n        this.heapifyUp();\r\n    }\r\n\r\n    // 重新排列堆（上浮操作）\r\n    private heapifyUp(): void {\r\n        let index = this.heap.length - 1;\r\n        while (index > 0) {\r\n            const parentIndex = this.getParentIndex(index);\r\n            if (this.heap[parentIndex].priority <= this.heap[index].priority) {\r\n                break;\r\n            }\r\n            this.swap(index, parentIndex);\r\n            index = parentIndex;\r\n        }\r\n    }\r\n\r\n    // 移除並返回優先級最高的元素（最小的）\r\n    dequeue(): T | null {\r\n        if (this.heap.length === 0) return null;\r\n        if (this.heap.length === 1) return this.heap.pop()!.value;\r\n\r\n        const root = this.heap[0].value;\r\n        this.heap[0] = this.heap.pop()!;\r\n        this.heapifyDown();\r\n        return root;\r\n    }\r\n\r\n    // 重新排列堆（下沉操作）\r\n    private heapifyDown(): void {\r\n        let index = 0;\r\n        while (this.getLeftChildIndex(index) < this.heap.length) {\r\n            let smallerChildIndex = this.getLeftChildIndex(index);\r\n            let rightChildIndex = this.getRightChildIndex(index);\r\n\r\n            if (\r\n                rightChildIndex < this.heap.length &&\r\n                this.heap[rightChildIndex].priority < this.heap[smallerChildIndex].priority\r\n            ) {\r\n                smallerChildIndex = rightChildIndex;\r\n            }\r\n\r\n            if (this.heap[index].priority <= this.heap[smallerChildIndex].priority) {\r\n                break;\r\n            }\r\n\r\n            this.swap(index, smallerChildIndex);\r\n            index = smallerChildIndex;\r\n        }\r\n    }\r\n\r\n    // 查看隊列頂部元素（不刪除）\r\n    peek(): T | null {\r\n        return this.heap.length > 0 ? this.heap[0].value : null;\r\n    }\r\n\r\n    // 確認是否為空\r\n    isEmpty(): boolean {\r\n        return this.heap.length === 0;\r\n    }\r\n}\r\n`;\r\n\r\nconst testCodeString = `\r\nconst pq = new PriorityQueue<string>();\r\n\r\npq.enqueue(\"Task 1\", 3);\r\npq.enqueue(\"Task 2\", 1);\r\npq.enqueue(\"Task 3\", 2);\r\n\r\nconsole.log(pq.dequeue()); // \"Task 2\" (priority 1)\r\nconsole.log(pq.dequeue()); // \"Task 3\" (priority 2)\r\nconsole.log(pq.dequeue()); // \"Task 1\" (priority 3)\r\nconsole.log(pq.isEmpty()); // true\r\n\r\n-> 解釋\r\nenqueue(value, priority): 插入一個元素，並確保它的位置符合最小堆的性質（小的優先）。\r\ndequeue(): 取出 最小優先級 的元素（即優先級數值最小）。\r\nheapifyUp(): 當新元素加入時，上浮以保持堆的結構。\r\nheapifyDown(): 當 dequeue() 取出根節點後，將最後一個元素移至根部並向下調整。`;\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'PriorityQueue',\n  setup(__props) {\n\r\nonMounted(() => {\r\n  Prism.highlightAll(); // 啟用語法高亮\r\n});\r\n\r\nconst showMore = ref(false);\r\nconst buttonText = ref('Copy')\r\n\r\nconst toggleShowMore = () => {\r\n  showMore.value = !showMore.value;\r\n};\r\n\r\nconst copyToClipboard = async () => {\r\n  try {\r\n    await navigator.clipboard.writeText(codeString);\r\n    buttonText.value = \"Copied!\";\r\n    setTimeout(() => {\r\n      buttonText.value = \"Copy\";\r\n    }, 1500);\r\n  } catch (err) {\r\n    console.error(\"Failed to copy: \", err);\r\n  }\r\n};\r\n\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"button\", {\n      class: \"close-btn\",\n      onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.$emit('close')))\n    }, \"×\"),\n    _cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Priority Queue\", -1)),\n    _cache[8] || (_cache[8] = _createElementVNode(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Priority_queue\",\n      target: \"_blank\"\n    }, \" wiki - Prioriy Queue \", -1)),\n    _cache[9] || (_cache[9] = _createElementVNode(\"p\", null, [\n      _createElementVNode(\"strong\", null, \"問題:\"),\n      _createTextVNode(\" 特殊的隊列結構中，每個元素都有一個關聯的「優先級」，並且元素根據其優先級進行排序。 \")\n    ], -1)),\n    (showMore.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[1] || (_cache[1] = [\n          _createElementVNode(\"p\", null, \" ... 我們可以用 最小堆（Min Heap） 或 最大堆（Max Heap） 來實現優先隊列。這裡我們使用 最小堆（Min Heap） 來確保優先級數值較小的元素優先出列。 通常，優先級高的元素會被優先處理。 \", -1)\n        ])))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"button\", {\n      id: \"toggleShowMoreButton\",\n      onClick: toggleShowMore\n    }, _toDisplayString(showMore.value ? '(Hide)' : 'Click to Show More ↓'), 1),\n    _cache[10] || (_cache[10] = _createElementVNode(\"h3\", null, \"-- 我的解答 --\", -1)),\n    _createElementVNode(\"pre\", _hoisted_3, [\n      _cache[2] || (_cache[2] = _createTextVNode(\"      \")),\n      _createElementVNode(\"button\", {\n        class: \"copy-btn\",\n        onClick: copyToClipboard\n      }, _toDisplayString(buttonText.value), 1),\n      _cache[3] || (_cache[3] = _createTextVNode(\"\\n      \")),\n      _createElementVNode(\"code\", { class: \"language-javascript\" }, _toDisplayString(codeString)),\n      _cache[4] || (_cache[4] = _createTextVNode(\"\\n    \"))\n    ]),\n    _cache[11] || (_cache[11] = _createElementVNode(\"h3\", null, \"-- 測試用例 --\", -1)),\n    _createElementVNode(\"pre\", { class: \"test-block\" }, [\n      _cache[5] || (_cache[5] = _createTextVNode(\"      \")),\n      _createElementVNode(\"code\", { class: \"language-javascript\" }, _toDisplayString(testCodeString)),\n      _cache[6] || (_cache[6] = _createTextVNode(\"\\n    \"))\n    ])\n  ]))\n}\n}\n\n})","<template>\r\n  <div class=\"problem-detail\">\r\n    <!-- 關閉按鈕 -->\r\n    <button class=\"close-btn\" @click=\"$emit('close')\">&times;</button>\r\n\r\n    <!-- 題目標題 -->\r\n    <h2>Priority Queue</h2>\r\n    <a href=\"https://en.wikipedia.org/wiki/Priority_queue\" target=\"_blank\">\r\n      wiki - Prioriy Queue\r\n    </a>\r\n    <p>\r\n      <strong>問題:</strong>\r\n      特殊的隊列結構中，每個元素都有一個關聯的「優先級」，並且元素根據其優先級進行排序。\r\n    </p>\r\n    <div v-if=\"showMore\">\r\n      <p>\r\n        ...\r\n      我們可以用 最小堆（Min Heap） 或 最大堆（Max Heap） 來實現優先隊列。這裡我們使用 最小堆（Min Heap） 來確保優先級數值較小的元素優先出列。\r\n      通常，優先級高的元素會被優先處理。\r\n      </p>\r\n    </div>\r\n    <button id=\"toggleShowMoreButton\" @click=\"toggleShowMore\">\r\n      {{ showMore ? '(Hide)' : 'Click to Show More ↓' }}\r\n    </button>\r\n\r\n    <!-- 我的解答 -->\r\n    <h3>-- 我的解答 --</h3>\r\n    <pre class=\"code-block\">\r\n      <button class=\"copy-btn\" @click=\"copyToClipboard\">{{ buttonText }}</button>\r\n      <code class=\"language-javascript\">{{ codeString }}</code>\r\n    </pre>\r\n\r\n    <!-- 測試用例 -->\r\n    <h3>-- 測試用例 --</h3>\r\n    <pre class=\"test-block\">\r\n      <code class=\"language-javascript\">{{ testCodeString }}</code>\r\n    </pre>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted } from 'vue';\r\nimport Prism from 'prismjs';\r\n\r\nonMounted(() => {\r\n  Prism.highlightAll(); // 啟用語法高亮\r\n});\r\n\r\nconst showMore = ref(false);\r\nconst buttonText = ref('Copy')\r\n\r\nconst toggleShowMore = () => {\r\n  showMore.value = !showMore.value;\r\n};\r\n\r\nconst copyToClipboard = async () => {\r\n  try {\r\n    await navigator.clipboard.writeText(codeString);\r\n    buttonText.value = \"Copied!\";\r\n    setTimeout(() => {\r\n      buttonText.value = \"Copy\";\r\n    }, 1500);\r\n  } catch (err) {\r\n    console.error(\"Failed to copy: \", err);\r\n  }\r\n};\r\n\r\nconst codeString = `\r\n/*\r\n  Time complexity:\r\n  Space complexity:\r\n*/\r\nclass PriorityQueue<T> {\r\n    private heap: { value: T; priority: number }[];\r\n\r\n    constructor() {\r\n        this.heap = [];\r\n    }\r\n\r\n    // 取得父節點索引\r\n    private getParentIndex(index: number): number {\r\n        return Math.floor((index - 1) / 2);\r\n    }\r\n\r\n    // 取得左子節點索引\r\n    private getLeftChildIndex(index: number): number {\r\n        return 2 * index + 1;\r\n    }\r\n\r\n    // 取得右子節點索引\r\n    private getRightChildIndex(index: number): number {\r\n        return 2 * index + 2;\r\n    }\r\n\r\n    // 交換兩個元素\r\n    private swap(i: number, j: number): void {\r\n        [this.heap[i], this.heap[j]] = [this.heap[j], this.heap[i]];\r\n    }\r\n\r\n    // 插入新元素\r\n    enqueue(value: T, priority: number): void {\r\n        const newNode = { value, priority };\r\n        this.heap.push(newNode);\r\n        this.heapifyUp();\r\n    }\r\n\r\n    // 重新排列堆（上浮操作）\r\n    private heapifyUp(): void {\r\n        let index = this.heap.length - 1;\r\n        while (index > 0) {\r\n            const parentIndex = this.getParentIndex(index);\r\n            if (this.heap[parentIndex].priority <= this.heap[index].priority) {\r\n                break;\r\n            }\r\n            this.swap(index, parentIndex);\r\n            index = parentIndex;\r\n        }\r\n    }\r\n\r\n    // 移除並返回優先級最高的元素（最小的）\r\n    dequeue(): T | null {\r\n        if (this.heap.length === 0) return null;\r\n        if (this.heap.length === 1) return this.heap.pop()!.value;\r\n\r\n        const root = this.heap[0].value;\r\n        this.heap[0] = this.heap.pop()!;\r\n        this.heapifyDown();\r\n        return root;\r\n    }\r\n\r\n    // 重新排列堆（下沉操作）\r\n    private heapifyDown(): void {\r\n        let index = 0;\r\n        while (this.getLeftChildIndex(index) < this.heap.length) {\r\n            let smallerChildIndex = this.getLeftChildIndex(index);\r\n            let rightChildIndex = this.getRightChildIndex(index);\r\n\r\n            if (\r\n                rightChildIndex < this.heap.length &&\r\n                this.heap[rightChildIndex].priority < this.heap[smallerChildIndex].priority\r\n            ) {\r\n                smallerChildIndex = rightChildIndex;\r\n            }\r\n\r\n            if (this.heap[index].priority <= this.heap[smallerChildIndex].priority) {\r\n                break;\r\n            }\r\n\r\n            this.swap(index, smallerChildIndex);\r\n            index = smallerChildIndex;\r\n        }\r\n    }\r\n\r\n    // 查看隊列頂部元素（不刪除）\r\n    peek(): T | null {\r\n        return this.heap.length > 0 ? this.heap[0].value : null;\r\n    }\r\n\r\n    // 確認是否為空\r\n    isEmpty(): boolean {\r\n        return this.heap.length === 0;\r\n    }\r\n}\r\n`;\r\n\r\nconst testCodeString = `\r\nconst pq = new PriorityQueue<string>();\r\n\r\npq.enqueue(\"Task 1\", 3);\r\npq.enqueue(\"Task 2\", 1);\r\npq.enqueue(\"Task 3\", 2);\r\n\r\nconsole.log(pq.dequeue()); // \"Task 2\" (priority 1)\r\nconsole.log(pq.dequeue()); // \"Task 3\" (priority 2)\r\nconsole.log(pq.dequeue()); // \"Task 1\" (priority 3)\r\nconsole.log(pq.isEmpty()); // true\r\n\r\n-> 解釋\r\nenqueue(value, priority): 插入一個元素，並確保它的位置符合最小堆的性質（小的優先）。\r\ndequeue(): 取出 最小優先級 的元素（即優先級數值最小）。\r\nheapifyUp(): 當新元素加入時，上浮以保持堆的結構。\r\nheapifyDown(): 當 dequeue() 取出根節點後，將最後一個元素移至根部並向下調整。`;\r\n</script>\r\n\r\n<style scoped>\r\n.problem-detail {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: rgb(65, 64, 64);\r\n  padding: 24px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);\r\n  width: 70%;\r\n  max-width: 90%;\r\n  color: #f1f1f1;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  overflow-y: auto;\r\n  max-height: 90vh;\r\n}\r\n\r\nh2 {\r\n  font-size: 20px;\r\n  margin-bottom: 0px;\r\n  color: #27ae60;\r\n}\r\n\r\np {\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n  margin: 10px;\r\n}\r\n\r\nh3 {\r\n  font-size: 16px;\r\n  margin-top: 10px;\r\n  color: #ff9900;\r\n}\r\n\r\na {\r\n  color: #ff9900;\r\n  text-decoration: none;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  transition: color 0.3s ease, text-shadow 0.3s ease;\r\n}\r\n\r\na:hover {\r\n  color: #ffcc00;\r\n  text-shadow: 0 0 8px #ffcc00;\r\n}\r\n\r\na:active {\r\n  color: #ffaa00;\r\n}\r\n\r\n.close-btn {\r\n  position: absolute;\r\n  top: 12px;\r\n  right: 12px;\r\n  background: none;\r\n  border: none;\r\n  font-size: 28px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  color: #ff5555;\r\n  transition: transform 0.2s ease, color 0.2s ease;\r\n}\r\n\r\n.close-btn:hover {\r\n  color: #ff0000;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.code-block {\r\n  border-radius: 10px;\r\n  white-space: pre-wrap;\r\n  font-family: 'Courier New', monospace;\r\n  /* font-family: 'Fira Code', 'Courier New', monospace; */\r\n  max-height: 500px; /* 限制程式碼區塊高度 */\r\n  color: #f8f8f2;\r\n  font-size: 14px;\r\n  overflow-x: auto; /* 水平滾軸 */\r\n  overflow-y: auto; /* 垂直滾軸 */\r\n  border: 1px solid #444;\r\n  text-align: left; /* 確保程式碼區塊靠左對齊 */\r\n}\r\n\r\n/* 美化 code-block 滾動條 */\r\n.code-block::-webkit-scrollbar {\r\n  width: 6px; /* 控制滾動條寬度 */\r\n  height: 6px; /* 控制水平滾動條寬度 */\r\n}\r\n\r\n.code-block::-webkit-scrollbar-track {\r\n  background: #1e1e2f; /* 滾動條背景色 */\r\n  border-radius: 10px;\r\n}\r\n\r\n.code-block::-webkit-scrollbar-thumb {\r\n  background: #ff9900; /* 滾動條滑塊顏色 */\r\n  border-radius: 10px;\r\n}\r\n\r\n.code-block::-webkit-scrollbar-thumb:hover {\r\n  background: #ffcc00; /* 滑鼠懸停時變亮 */\r\n}\r\n\r\n.test-block {\r\n  border-radius: 10px;\r\n  white-space: pre-wrap;\r\n  font-family: 'Courier New', monospace;\r\n  /* font-family: 'Fira Code', 'Courier New', monospace; */\r\n  max-height: 100px; /* 限制程式碼區塊高度 */\r\n  color: #f8f8f2;\r\n  font-size: 14px;\r\n  overflow-x: auto; /* 水平滾軸 */\r\n  overflow-y: auto; /* 垂直滾軸 */\r\n  border: 1px solid #444;\r\n  text-align: left; /* 確保程式碼區塊靠左對齊 */\r\n}\r\n\r\n/* 美化化滾動條樣式 */\r\n.test-block::-webkit-scrollbar {\r\n  width: 9px;\r\n  height: 9px;\r\n}\r\n\r\n.test-block::-webkit-scrollbar-track {\r\n  background: #1e1e2f;\r\n  border-radius: 10px;\r\n}\r\n\r\n.test-block::-webkit-scrollbar-thumb {\r\n  background: #1a6cb9;\r\n  border-radius: 10px;\r\n  border: 2px solid #1e1e2f;\r\n}\r\n\r\n.test-block::-webkit-scrollbar-thumb:hover {\r\n  background: #11d3e0;\r\n}\r\n\r\npre {\r\n  margin: 0;\r\n  text-align: left; /* 確保 pre 區塊內的文字靠左對齊 */\r\n}\r\n\r\nbutton {\r\n  outline: none;\r\n}\r\n\r\n.copy-btn {\r\n  position: relative;\r\n  float: right;\r\n  padding: 5px 10px;\r\n  background-color: #29b6f6;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n  /* display: none; */\r\n}\r\n\r\n.copy-btn:hover{\r\n  background-color: #1e88e5;\r\n  animation: shake 500ms;\r\n}\r\n\r\n@keyframes shake {\r\n    0% { rotate: 0deg; }\r\n    30% { rotate: 17deg; }\r\n    60% { rotate: -17deg; }\r\n    100% { rotate: 0deg; }\r\n}\r\n\r\n/* Show More Button Style */\r\n#toggleShowMoreButton {\r\n  background: rgb(65, 64, 64);\r\n  color: black;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  outline: none;\r\n  transition: background-color 0.3s ease, transform 0.2s ease;\r\n}\r\n\r\n#toggleShowMoreButton:hover {\r\n  background-color: #504f4c;\r\n  transform: scale(1.05);\r\n}\r\n\r\n#toggleShowMoreButton:active {\r\n  transform: scale(0.95);\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .problem-detail {\r\n    width: 95%;\r\n    padding: 16px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 18px;\r\n  }\r\n\r\n  .close-btn {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .code-block {\r\n    font-size: 12px;\r\n    max-height: 300px; /* 限制程式碼區塊高度 */\r\n  }\r\n\r\n  .test-block {\r\n    font-size: 12px;\r\n  }\r\n}\r\n</style>\r\n","import script from \"./PriorityQueue.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./PriorityQueue.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./PriorityQueue.vue?vue&type=style&index=0&id=55f1518b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-55f1518b\"]])\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","key","_hoisted_3","codeString","testCodeString","_defineComponent","__name","setup","__props","onMounted","Prism","showMore","ref","buttonText","toggleShowMore","value","copyToClipboard","async","navigator","clipboard","writeText","setTimeout","err","console","error","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","onClick","$event","$emit","href","target","_createTextVNode","_createCommentVNode","id","_toDisplayString","__exports__"],"sourceRoot":""}