"use strict";(self["webpackChunkleetcode"]=self["webpackChunkleetcode"]||[]).push([[637],{5637:function(e,t,n){n.r(t),n.d(t,{default:function(){return m}});var s=n(641),r=n(33),a=n(953),c=n(8848),o=n.n(c);const l={class:"problem-detail"},h={class:"code-block"},i={class:"language-javascript"},g={class:"test-block"},u={class:"language-javascript"};var d=(0,s.pM)({__name:"LongestSubstring",setup(e){(0,s.sV)((()=>{o().highlightAll()}));const t=(0,a.KR)('\n/*\n    Time complexity: O(n) - Here, n is the length of the string s.\n    Space complexity: O(min(m, n)) - Here, m is the size of the character set, and n is the length of the string s.\n*/\n\nconst lengthOfLongestSubstring = (str: string): number => {\n    const n: number = str.length;\n    let maxLength = 0;\n\n    // Map to store the most recent index of each character (Map -> [X: str[index], Y: index])\n    const charIndexMap = new Map<string, number>();\n\n    // "start" is the beginning of the current substring\n    for (let end = 0, start = 0; end < n; end++) {\n        if (charIndexMap.has(str[end])) {\n            // Move "start" to the right of the last occurrence of the character\n            start = Math.max(charIndexMap.get(str[end])! + 1, start);\n        }\n\n        // Update the maximum length of the substring\n        maxLength = Math.max(maxLength, end - start + 1);\n\n        // Record the current index of the character\n        charIndexMap.set(str[end], end);\n    }\n\n    return maxLength;\n};\n'),n=(0,a.KR)('\nconsole.log(lengthOfLongestSubstring("abcabcbb")); // Output: 3\nconsole.log(lengthOfLongestSubstring("bbbbb")); // Output: 1');return(e,a)=>((0,s.uX)(),(0,s.CE)("div",l,[(0,s.Lk)("button",{class:"close-btn",onClick:a[0]||(a[0]=t=>e.$emit("close"))},"×"),a[5]||(a[5]=(0,s.Lk)("h2",null,"3_Longest Substring (medium)",-1)),a[6]||(a[6]=(0,s.Lk)("a",{href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/description/",target:"_blank"}," leetcode_3 ",-1)),a[7]||(a[7]=(0,s.Lk)("p",null,[(0,s.Lk)("strong",null,"問題:"),(0,s.eW)(" 找出最長無重複字符的子字串 給定一個字串 str，找出其中不包含重複字符的最長子字串的長度。 ")],-1)),a[8]||(a[8]=(0,s.Lk)("h3",null,"-- 我的解答 --",-1)),(0,s.Lk)("pre",h,[a[1]||(a[1]=(0,s.eW)("      ")),(0,s.Lk)("code",i,(0,r.v_)(t.value),1),a[2]||(a[2]=(0,s.eW)("\n    "))]),a[9]||(a[9]=(0,s.Lk)("h3",null,"-- 測試用例 --",-1)),(0,s.Lk)("pre",g,[a[3]||(a[3]=(0,s.eW)("      ")),(0,s.Lk)("code",u,(0,r.v_)(n.value),1),a[4]||(a[4]=(0,s.eW)("\n    "))])]))}}),b=n(6262);const p=(0,b.A)(d,[["__scopeId","data-v-e0f885b8"]]);var m=p}}]);
//# sourceMappingURL=637.69444be3.js.map