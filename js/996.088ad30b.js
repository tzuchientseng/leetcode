"use strict";(self["webpackChunkleetcode"]=self["webpackChunkleetcode"]||[]).push([[996],{4996:function(n,e,t){t.r(e),t.d(e,{default:function(){return g}});var o=t(641),c=t(33),u=t(953),r=t(8848),a=t.n(r);const l={class:"problem-detail"},m={class:"code-block"},s="\n/*\n  Method 1: Brute Force\n  Time complexity o(n(n-1)/2) == o(n^2)\n  Space complexity o(1)\n*/\nconst twoSumBruteForce = (nums: number[], target: number): number[] => {\n for (let i = 0; i < nums.length; i++) {\n   for (let j = i + 1; j < nums.length; j++) {\n    let sum = nums[i] + nums[j];\n    if (target === sum) return [i, j];\n   }\n }\n};\n\n/*\n  Method 2: HashMap\n  Time complexity o(n)\n  Space complexity o(n)\n*/\nconst twoSumHashMap = (nums: number[], target: number): number[] => {\n  const recordMap = new Map<number, number>();\n  for (let i = 0; i < nums.length; i++) {\n    const complement: number = target - nums[i];\n    if (recordMap.has(complement)) {\n      return [recordMap.get(complement), i];\n    }\n    recordMap.set(nums[i], i);\n    // console.log({recordMap})\n  }\n}\n\n/*\n  Method 3: Functional Programming (Reduce)\n  Time complexity o(n)\n  Space complexity o(n)\n*/\nconst twoSumReduce = (nums: number[], target: number): number[] => {\n  // array.reduce((accumulator, currentValue(key), currentIndex?(value), array?) => { ... }, initialValue);\n  const result = nums.reduce(\n    (acc: { map: Map<number, number>, found: boolean, indices: number[] }, num: number, index: number) => {\n      if (acc.found) return acc; // 若找到則停止\n      const complement: number = target - num;\n\n      if (acc.map.has(complement)) {\n        return {\n          ...acc,\n          found: true,\n          indices: [acc.map.get(complement)!, index], // 使用 ! 表示非空斷言 一定不是 null 或 undefined\n        };\n      }\n      return {\n        ...acc,\n        map: acc.map.set(num, index),\n      };\n    },\n    { map: new Map<number, number>(), found: false, indices: [] }\n  );\n  return result.indices;\n};\n",i="\nconsole.log(twoSumBruteForce([2, 7, 11, 15], 9)); // [0, 1]\nconsole.log(twoSumHashMap([3, 2, 4], 6)); // [1, 2]\nconsole.log(twoSumReduce([3, 3], 6)); // [0, 1]";var p=(0,o.pM)({__name:"TwoSum",setup(n){const e=(0,u.KR)("Copy");(0,o.sV)((()=>{a().highlightAll()}));const t=async()=>{try{await navigator.clipboard.writeText(s),e.value="Copied!",setTimeout((()=>{e.value="Copy"}),1500)}catch(n){console.error("Failed to copy: ",n)}};return(n,u)=>((0,o.uX)(),(0,o.CE)("div",l,[(0,o.Lk)("button",{class:"close-btn",onClick:u[0]||(u[0]=e=>n.$emit("close"))},"×"),u[6]||(u[6]=(0,o.Lk)("h2",null,"1__Two Sum (easy)",-1)),u[7]||(u[7]=(0,o.Lk)("a",{href:"https://leetcode.com/problems/two-sum/description/",target:"_blank"}," leetcode_1 ",-1)),u[8]||(u[8]=(0,o.Lk)("p",null,[(0,o.Lk)("strong",null,"問題:"),(0,o.eW)(" 給定一個整數陣列 nums 和一個目標值 target， 請找出並返回兩個數字，使它們的和等於目標值。 ")],-1)),u[9]||(u[9]=(0,o.Lk)("h3",null,"-- 我的解答 --",-1)),(0,o.Lk)("pre",m,[u[1]||(u[1]=(0,o.eW)("      ")),(0,o.Lk)("button",{class:"copy-btn",onClick:t},(0,c.v_)(e.value),1),u[2]||(u[2]=(0,o.eW)("\n      ")),(0,o.Lk)("code",{class:"language-javascript"},(0,c.v_)(s)),u[3]||(u[3]=(0,o.eW)("\n    "))]),u[10]||(u[10]=(0,o.Lk)("h3",null,"-- 測試用例 --",-1)),(0,o.Lk)("pre",{class:"test-block"},[u[4]||(u[4]=(0,o.eW)("      ")),(0,o.Lk)("code",{class:"language-javascript"},(0,c.v_)(i)),u[5]||(u[5]=(0,o.eW)("\n    "))])]))}}),d=t(6262);const b=(0,d.A)(p,[["__scopeId","data-v-31d2eb0b"]]);var g=b}}]);
//# sourceMappingURL=996.088ad30b.js.map