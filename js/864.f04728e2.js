"use strict";(self["webpackChunkleetcode"]=self["webpackChunkleetcode"]||[]).push([[864],{6864:function(n,r,t){t.r(r),t.d(r,{default:function(){return m}});var e=t(641),o=t(33),a=t(953),i=t(8848),s=t.n(i);const c={class:"problem-detail"},l={key:0},u={class:"code-block"},p="\n/*\n  Quick Sort 原地(In-Place): moves smaller elements to left of a pivot(the last element of the array). recursively divide array in 2 partitions\n  Time complexity: \n    - Best case: Ω(nlog(n))\n    - Average case: Θ(nlog(n))\n    - Worst case: O(n^2)\n  Space complexity: O(log(n))\n*/\nclass QuickSort {\n    static quicksort(arr: number[], start: number, end: number): void {\n        if (end <= start) return; // base case\n        const pivot = QuickSort.partition(arr, start, end);\n        QuickSort.quicksort(arr, start, pivot - 1);\n        QuickSort.quicksort(arr, pivot + 1, end);\n    }\n\n    private static partition(arr: number[], start: number, end: number): number {\n    /*\n      Concept:\n        1. j >= pivot -> do nothing\n        2. j < pivot -> i++,  swap arr[i] and arr[j]\n        3. End of loop, i++, swap arr[i] and arr[end] (pivot)\n        4. return pivot's ending position\n    */\n        const pivot = arr[end];\n        let i = start - 1;\n\n        for (let j = start; j <= end - 1; j++) {\n            if (arr[j] < pivot) {\n                i++;\n                [arr[i], arr[j]] = [arr[j], arr[i]]; // Swap arr[i] and arr[j]\n            }\n        }\n        i++;\n        [arr[i], arr[end]] = [arr[end], arr[i]];\n        return i; // Return the pivot's final index\n    }\n}\n\n/*\n  Quick Sort 非原地(Out-of-Place)\n  Time complexity: \n    - Best case: Ω(nlog(n))\n    - Average case: Θ(nlog(n))\n    - Worst case: O(n^2)\n  Space complexity:\n    - Best case: Ω(log(n))\n    - Average case: Θ(log(n))\n    - Worst case: O(log(n))\n*/\n\nfunction quickSort(arr: number[]): number[] {\n    // 基本情況: 如果陣列長度小於等於1，直接返回\n    if (arr.length <= 1) {\n        return arr;\n    }\n\n    // 選擇基準值，這裡使用陣列的中間值作為基準值\n    const pivot = arr[Math.floor(arr.length / 2)];\n\n    // 定義三個陣列，分別存放小於基準值、等於基準值和大於基準值的元素\n    const left: number[] = [];\n    const right: number[] = [];\n    const equal: number[] = [];\n\n    // 遍歷陣列，將元素分類\n    for (const num of arr) {\n        if (num < pivot) {\n            left.push(num);\n        } else if (num > pivot) {\n            right.push(num);\n        } else {\n            equal.push(num);\n        }\n    }\n\n    // 遞迴排序左右兩部分，並合併結果\n    return [...quickSort(left), ...equal, ...quickSort(right)];\n}",k='\nconst array = [8, 2, 5, 3, 9, 4, 7, 6, 1];\nQuickSort.quicksort(array, 0, array.length - 1);\nconsole.log(array.join(" ")); // Output: 1 2 3 4 5 6 7 8 9\n\n//\nconst unsortedArray = [3, 6, 8, 10, 1, 2, 1];\nconst sortedArray = quickSort(unsortedArray);\nconsole.log("排序後的陣列:", sortedArray);';var d=(0,e.pM)({__name:"QuickSort",setup(n){(0,e.sV)((()=>{s().highlightAll()}));const r=(0,a.KR)(!1),t=(0,a.KR)("Copy"),i=()=>{r.value=!r.value},d=async()=>{try{await navigator.clipboard.writeText(p),t.value="Copied!",setTimeout((()=>{t.value="Copy"}),1500)}catch(n){console.error("Failed to copy: ",n)}};return(n,a)=>((0,e.uX)(),(0,e.CE)("div",c,[(0,e.Lk)("button",{class:"close-btn",onClick:a[0]||(a[0]=r=>n.$emit("close"))},"×"),a[7]||(a[7]=(0,e.Lk)("h2",null,"Quick Sort",-1)),a[8]||(a[8]=(0,e.Lk)("a",{href:"https://en.wikipedia.org/wiki/Quicksort",target:"_blank"}," wiki - Quick Sort ",-1)),a[9]||(a[9]=(0,e.Lk)("p",null,[(0,e.Lk)("strong",null,"問題:"),(0,e.eW)(" 給定一個由數字組成的陣列，使用 Quick Sort 演算法將陣列中的元素排序為遞增順序。 ")],-1)),r.value?((0,e.uX)(),(0,e.CE)("div",l,a[1]||(a[1]=[(0,e.Lk)("p",null," 如果陣列的長度為零或一，則它已經是排序好的，無需進一步操作。否則，將陣列分割為兩個子陣列： 一個包含所有小於基準點 (pivot) 的元素，另一個包含所有大於基準點的元素。對這兩個子陣列遞迴執行 Quick Sort，最後將排序結果合併為完整的排序陣列。 ",-1)]))):(0,e.Q3)("",!0),(0,e.Lk)("button",{id:"toggleShowMoreButton",onClick:i},(0,o.v_)(r.value?"(Hide)":"Click to Show More ↓"),1),a[10]||(a[10]=(0,e.Lk)("h3",null,"-- 我的解答 --",-1)),(0,e.Lk)("pre",u,[a[2]||(a[2]=(0,e.eW)("      ")),(0,e.Lk)("button",{class:"copy-btn",onClick:d},(0,o.v_)(t.value),1),a[3]||(a[3]=(0,e.eW)("\n      ")),(0,e.Lk)("code",{class:"language-javascript"},(0,o.v_)(p)),a[4]||(a[4]=(0,e.eW)("\n    "))]),a[11]||(a[11]=(0,e.Lk)("h3",null,"-- 測試用例 --",-1)),(0,e.Lk)("pre",{class:"test-block"},[a[5]||(a[5]=(0,e.eW)("      ")),(0,e.Lk)("code",{class:"language-javascript"},(0,o.v_)(k)),a[6]||(a[6]=(0,e.eW)("\n    "))])]))}}),v=t(6262);const g=(0,v.A)(d,[["__scopeId","data-v-65d95bee"]]);var m=g}}]);
//# sourceMappingURL=864.f04728e2.js.map