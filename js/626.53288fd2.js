"use strict";(self["webpackChunkleetcode"]=self["webpackChunkleetcode"]||[]).push([[626],{4626:function(n,e,t){t.r(e),t.d(e,{default:function(){return g}});var c=t(641),i=t(33),o=t(953),u=t(8848),r=t.n(u);const l={class:"problem-detail"},a={key:0},m="\n/*\n  Method 1: Recursive\n  Time complexity O(2^n) \n  Space complexity O(n)\n*/\nconst getFibonacciRecursive = (num: number): number => {\n    if (num === 0 || num === 1) return num; // 不要寫成 if (num === 0 || 1) return num;\n    return getFibonacciRecursive(num - 1) + getFibonacciRecursive(num - 2);\n};\n\n/*\n  Method 2: Iterative \n  Time complexity O(n) \n  Space complexity O(1)\n*/\nconst getFibonacciIterative = (num: number): number => {\n  if (num <= 1) return num;\n\n  let previous = 0, current = 1;\n  let next = 0;\n\n  for (let i = 2; i <= num; i++) {\n    next = previous + current;\n    previous = current;\n    current = next;\n  }\n\n  return current;\n\n/*\n  Method 3: Memoization (Dynamic Programming: Top-Down)\n  Time complexity O(n)\n  Space complexity O(n)\n*/\nconst getFibonacciMemoization = (num: number): number => {\n    // const memo: number[] = Array.from({ length: num + 1 }, () => -1);\n  const memo: number[] = Array(num + 1).fill(-1);\n  const helper = (n: number): number => {\n    if (n === 0 || n === 1) return n;\n    if (memo[n] !== -1) return memo[n];\n    memo[n] = helper(n - 1) + helper(n - 2);\n    return memo[n];\n  };\n  return helper(num);\n};\n",s="\nconsole.log(getFibonacciRecursive(4)); // Output: 3\nconsole.log(getFibonacciIterative(4)); // Output: 3\nconsole.log(getFibonacciMemoization(4)); // Output: 3\n";var p=(0,c.pM)({__name:"FibonacciSequences",setup(n){(0,c.sV)((()=>{r().highlightAll()}));const e=(0,o.KR)(!1),t=()=>{e.value=!e.value};return(n,o)=>((0,c.uX)(),(0,c.CE)("div",l,[(0,c.Lk)("button",{class:"close-btn",onClick:o[0]||(o[0]=e=>n.$emit("close"))},"×"),o[6]||(o[6]=(0,c.Lk)("h2",null,"Fibonacci Sequences",-1)),o[7]||(o[7]=(0,c.Lk)("a",{href:"https://en.wikipedia.org/wiki/Fibonacci_sequence",target:"_blank"}," https://en.wikipedia.org/wiki/Fibonacci_sequence ",-1)),o[8]||(o[8]=(0,c.Lk)("p",null,[(0,c.Lk)("strong",null,"問題:"),(0,c.eW)(" 費氏數列是一個數列，其中每個數字都是前兩個數字的和。 ")],-1)),e.value?((0,c.uX)(),(0,c.CE)("div",a,o[1]||(o[1]=[(0,c.Lk)("p",null," 數列的起始值通常為 0 和 1，因此費氏數列的前幾個數字為： 0, 1, 1, 2, 3, 5, 8, 13, 21, ...。 ",-1),(0,c.Lk)("p",null,"撰寫一個函式，接收一個整數 n，並返回費氏數列中第 n 個數字。",-1)]))):(0,c.Q3)("",!0),(0,c.Lk)("button",{id:"toggleShowMoreButton",onClick:t},(0,i.v_)(e.value?"(Hide)":"Click to Show More ↓"),1),o[9]||(o[9]=(0,c.Lk)("h3",null,"-- 我的解答 --",-1)),(0,c.Lk)("pre",{class:"code-block"},[o[2]||(o[2]=(0,c.eW)("      ")),(0,c.Lk)("code",{class:"language-javascript"},(0,i.v_)(m)),o[3]||(o[3]=(0,c.eW)("\n    "))]),o[10]||(o[10]=(0,c.Lk)("h3",null,"-- 測試用例 --",-1)),(0,c.Lk)("pre",{class:"code-block"},[o[4]||(o[4]=(0,c.eW)("      ")),(0,c.Lk)("code",{class:"language-javascript"},(0,i.v_)(s)),o[5]||(o[5]=(0,c.eW)("\n    "))])]))}}),b=t(6262);const k=(0,b.A)(p,[["__scopeId","data-v-065b2d20"]]);var g=k}}]);
//# sourceMappingURL=626.53288fd2.js.map