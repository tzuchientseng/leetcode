"use strict";(self["webpackChunkleetcode"]=self["webpackChunkleetcode"]||[]).push([[998],{998:function(n,e,i){i.r(e),i.d(e,{default:function(){return d}});var c=i(641),o=i(33),t=i(953),u=i(8848),r=i.n(u);const a={class:"problem-detail"},l={key:0},m="\n/*\n  Method 1: Functional Programing: Tail Recursion\n  Time complexity O(n) \n  Space complexity O(1)\n  -> Process:\n      getFibonacciTailRec(5, 0, 1)\n    -> getFibonacciTailRec(4, 1, 1)\n    -> getFibonacciTailRec(3, 1, 2)\n    -> getFibonacciTailRec(2, 2, 3)\n    -> getFibonacciTailRec(1, 3, 5)\n    -> getFibonacciTailRec(0, 5, 8)\n*/\nconst getFibonacciTailRec = (num: number, a = 0, b = 1): number =>\n  num === 0 ? a : getFibonacciTailRec(num - 1, b, a + b);\n\n/*\n  Method 2: Recursive\n  Time complexity O(2^n) \n  Space complexity O(n)\n*/\nconst getFibonacciRecursive = (num: number): number => {\n    if (num === 0 || num === 1) return num; // 不要寫成 if (num === 0 || 1) return num;\n    return getFibonacciRecursive(num - 1) + getFibonacciRecursive(num - 2);\n};\n\n/*\n  Method 3: Iterative \n  Time complexity O(n) \n  Space complexity O(1)\n*/\nconst getFibonacciIterative = (num: number): number => {\n  if (num <= 1) return num;\n\n  let previous = 0, current = 1;\n  let next = 0;\n\n  for (let i = 2; i <= num; i++) {\n    next = previous + current;\n    previous = current;\n    current = next;\n  }\n\n  return current;\n\n/*\n  Method 4: Memoization (Dynamic Programming: Bottom-Up)\n  Time complexity O(n)\n  Space complexity O(n)\n*/\nconst getFibonacciBottomUp = (num: number): number => {\n  if (num <= 1) return num;\n\n  const dp: number[] = [0, 1];\n\n  for (let i = 2; i <= num; i++) {\n    dp[i] = dp[i - 1] + dp[i - 2];\n  }\n\n  return dp[num];\n};\n\n/*\n  Method 5: Memoization (Dynamic Programming: Top-Down)\n  Time complexity O(n)\n  Space complexity O(n)\n*/\nconst getFibonacciTopDown = (num: number): number => {\n  // const memo: number[] = Array.from({ length: num + 1 }, () => -1);\n  const memo: number[] = Array(num + 1).fill(-1);\n\n  const helper = (n: number): number => {\n    if (n <= 1) return n;\n    if (memo[n] !== -1) return memo[n];\n    memo[n] = helper(n - 1) + helper(n - 2);\n    return memo[n];\n  };\n\n  return helper(num);\n};\n\n",s="\nconsole.log(getFibonacciTailRec (4)); // Output: 3\nconsole.log(getFibonacciRecursive(4)); // Output: 3\nconsole.log(getFibonacciIterative(4)); // Output: 3\nconsole.log(getFibonacciBottomUp(4)); // Output: 3\nconsole.log(getFibonacciTopDown(4)); // Output: 3\n";var p=(0,c.pM)({__name:"FibonacciSequences",setup(n){(0,c.sV)((()=>{r().highlightAll()}));const e=(0,t.KR)(!1),i=()=>{e.value=!e.value};return(n,t)=>((0,c.uX)(),(0,c.CE)("div",a,[(0,c.Lk)("button",{class:"close-btn",onClick:t[0]||(t[0]=e=>n.$emit("close"))},"×"),t[6]||(t[6]=(0,c.Lk)("h2",null,"Fibonacci Sequences",-1)),t[7]||(t[7]=(0,c.Lk)("a",{href:"https://en.wikipedia.org/wiki/Fibonacci_sequence",target:"_blank"}," https://en.wikipedia.org/wiki/Fibonacci_sequence ",-1)),t[8]||(t[8]=(0,c.Lk)("p",null,[(0,c.Lk)("strong",null,"問題:"),(0,c.eW)(" 費氏數列是一個數列，其中每個數字都是前兩個數字的和。 ")],-1)),e.value?((0,c.uX)(),(0,c.CE)("div",l,t[1]||(t[1]=[(0,c.Lk)("p",null," 數列的起始值通常為 0 和 1，因此費氏數列的前幾個數字為： 0, 1, 1, 2, 3, 5, 8, 13, 21, ...。 ",-1),(0,c.Lk)("p",null,"撰寫一個函式，接收一個整數 n，並返回費氏數列中第 n 個數字。",-1)]))):(0,c.Q3)("",!0),(0,c.Lk)("button",{id:"toggleShowMoreButton",onClick:i},(0,o.v_)(e.value?"(Hide)":"Click to Show More ↓"),1),t[9]||(t[9]=(0,c.Lk)("h3",null,"-- 我的解答 --",-1)),(0,c.Lk)("pre",{class:"code-block"},[t[2]||(t[2]=(0,c.eW)("      ")),(0,c.Lk)("code",{class:"language-javascript"},(0,o.v_)(m)),t[3]||(t[3]=(0,c.eW)("\n    "))]),t[10]||(t[10]=(0,c.Lk)("h3",null,"-- 測試用例 --",-1)),(0,c.Lk)("pre",{class:"code-block"},[t[4]||(t[4]=(0,c.eW)("      ")),(0,c.Lk)("code",{class:"language-javascript"},(0,o.v_)(s)),t[5]||(t[5]=(0,c.eW)("\n    "))])]))}}),b=i(6262);const g=(0,b.A)(p,[["__scopeId","data-v-2f22d9d5"]]);var d=g}}]);
//# sourceMappingURL=998.95b5a262.js.map