{"version":3,"file":"js/858.6693f846.js","mappings":"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","sources":["webpack://leetcode/./src/components/problems/BFSAndDFS.vue?4faa","webpack://leetcode/./src/components/problems/BFSAndDFS.vue","webpack://leetcode/./src/components/problems/BFSAndDFS.vue?7c92"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vShow as _vShow, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\"\n\nconst _hoisted_1 = { class: \"problem-detail\" }\nconst _hoisted_2 = { key: 0 }\nconst _hoisted_3 = { class: \"modal-content\" }\nconst _hoisted_4 = {\n  key: 0,\n  class: \"loading-spinner\"\n}\nconst _hoisted_5 = [\"src\"]\n\nimport { ref, onMounted } from 'vue';\r\nimport Prism from 'prismjs';\r\n\r\n// 直接載入圖片\r\nimport BFSAndDFS from '@/assets/BFSAndDFS.png';\r\n\r\nconst codeString = `\r\n/* \r\n  模仿 API 資料串接\r\n  fetchNeighbours(1).then((data) => {console.log(data);}).catch((error) => {console.error(error);});\r\n  -> Output; [ 2, 3, 4 ]\r\n*/\r\nconst fakeData: Record<string, number[]> = {\r\n    \"1\": [2, 3, 4],\r\n    \"2\": [1, 5],\r\n    \"3\": [1, 5],\r\n    \"4\": [1, 6],\r\n    \"5\": [2, 3, 7],\r\n    \"6\": [4, 7],\r\n    \"7\": [5, 6],\r\n};\r\n\r\nasync function fetchNeighbours(node: number): Promise<number[]> {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(fakeData[node] || []); // Return an empty array if the node doesn't exist\r\n        }, 500); // Simulate network delay\r\n    });\r\n}\r\n\r\n/*\r\n  Assuming the graph has V vertices and E edges:\r\n  Time complexity: O(V + E)\r\n  Space complexity: O(V)\r\n*/\r\n\r\n// BFS 遍歷函數\r\nconst BFS = async (start: number) => {\r\n    const queue = [start];\r\n    const visited = new Set<number>();\r\n    visited.add(start);\r\n\r\n    while (queue.length > 0) {\r\n        const currentNode = queue.shift();\r\n        if (currentNode !== undefined) {\r\n            console.log(currentNode);\r\n\r\n            const neighbours = await fetchNeighbours(currentNode);\r\n\r\n            for (const neighbour of neighbours) {\r\n                if (!visited.has(neighbour)) {\r\n                    queue.push(neighbour);\r\n                    visited.add(neighbour);\r\n                }\r\n            }\r\n            /* FP:\r\n              neighbours.forEach(neighbour => {\r\n                  if (!visited.has(neighbour)) {\r\n                      visited.add(neighbour);\r\n                      queue.push(neighbour);\r\n                  }\r\n              });\r\n            */\r\n        }\r\n    }\r\n};\r\n\r\n// DFS 遍歷函數\r\nconst DFS = async (start: number) => {\r\n    const stack = [start];\r\n    const visited = new Set<number>();\r\n    visited.add(start);\r\n\r\n    while (stack.length > 0) {\r\n        const currentNode = stack.pop();\r\n        console.log(currentNode);\r\n\r\n        const neighbours = await fetchNeighbours(currentNode);\r\n        for (let neighbour of neighbours) {\r\n            if (!visited.has(neighbour)) {\r\n                visited.add(neighbour);\r\n                stack.push(neighbour);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/* 若含失敗率的方式: Fetch API 要配合 try-catch */\r\nasync function fetchNodeNeighborsWithFailure(node) {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (!(node in simulatedData)) {\r\n                reject(new Error(\"The specified node does not exist in the dataset\"));\r\n            } else if (Math.random() < 0.2) {\r\n                reject(new Error(\"A random error occurred while fetching the node data\"));\r\n            } else {\r\n                resolve(simulatedData[node] || []);\r\n            }\r\n        }, 500);\r\n    });\r\n}\r\n`;\r\n\r\nconst testCodeString = `\r\n\r\nBFS(1); // 測試 BFS 從節點 1 開始 Output: 1, 2, 3, 4, 5, 6, 7\r\nDFS(1); // 測試 BFS 從節點 1 開始 Output: 1, 4, 6, 7, 5, 3, 2`;\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'BFSAndDFS',\n  setup(__props) {\n\r\nonMounted(() => {\r\n  // Activate Prism.js syntax highlighting\r\n  Prism.highlightAll();\r\n});\r\n\r\n// Reactive references\r\nconst showMore = ref(false);\r\nconst showModal = ref(false);\r\nconst isLoading = ref(false);\r\nconst imageSrc = ref<string>(\"\");\r\n\r\n// Toggle show more/less content\r\nconst toggleShowMore = (): void => {\r\n  showMore.value = !showMore.value;\r\n};\r\n\r\n// Close the modal and reset states\r\nconst closeModal = (): void => {\r\n  showModal.value = false;\r\n  isLoading.value = false;\r\n  imageSrc.value = \"\"; // Reset the image source\r\n};\r\n\r\n// Handle successful image loading\r\nconst onLoadSuccess = (): void => {\r\n  isLoading.value = false; // Disable loading indicator\r\n};\r\n\r\n// Handle image loading errors\r\nconst onLoadError = (): void => {\r\n  isLoading.value = false; // Disable loading indicator\r\n  imageSrc.value = \"https://via.placeholder.com/600x400?text=Image+Not+Found\"; // Fallback image\r\n};\r\n\r\n// Open modal and set the image source\r\nconst openModal = (): void => {\r\n  showModal.value = true;\r\n  isLoading.value = true;\r\n  imageSrc.value = BFSAndDFS;\r\n};\r\n\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"button\", {\n      class: \"close-btn\",\n      onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.$emit('close')))\n    }, \"×\"),\n    _cache[6] || (_cache[6] = _createElementVNode(\"h2\", null, \"BFS / DFS\", -1)),\n    _cache[7] || (_cache[7] = _createElementVNode(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Breadth-first_search\",\n      target: \"_blank\"\n    }, \" (wiki - BFS) \", -1)),\n    _cache[8] || (_cache[8] = _createElementVNode(\"a\", {\n      href: \"https://en.wikipedia.org/wiki/Depth-first_search\",\n      target: \"_blank\"\n    }, \" (wiki - DFS) \", -1)),\n    _cache[9] || (_cache[9] = _createElementVNode(\"p\", null, [\n      _createElementVNode(\"strong\", null, \"問題:\"),\n      _createTextVNode(\" Graph Traversal \")\n    ], -1)),\n    (showMore.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[1] || (_cache[1] = [\n          _createElementVNode(\"p\", null, \"根據節點圖，從節點 1 開始，以下面兩種走訪方式印出節點。\", -1),\n          _createElementVNode(\"p\", null, \"1. 廣度優先 (Breadth-First Search, BFS)\", -1),\n          _createElementVNode(\"p\", null, \"2.深度優先 (Depth-First Search, DFS)\", -1)\n        ])))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"button\", {\n      id: \"toggleShowMoreButton\",\n      onClick: toggleShowMore\n    }, _toDisplayString(showMore.value ? '(Hide)' : 'Click to Show More ↓'), 1),\n    _cache[10] || (_cache[10] = _createElementVNode(\"br\", null, null, -1)),\n    _createElementVNode(\"button\", {\n      id: \"showModalButton\",\n      onClick: openModal\n    }, \"節點圖\"),\n    _cache[11] || (_cache[11] = _createElementVNode(\"h3\", null, \"-- 我的解答 --\", -1)),\n    _createElementVNode(\"pre\", { class: \"code-block\" }, [\n      _cache[2] || (_cache[2] = _createTextVNode(\"      \")),\n      _createElementVNode(\"code\", { class: \"language-javascript\" }, _toDisplayString(codeString)),\n      _cache[3] || (_cache[3] = _createTextVNode(\"\\n    \"))\n    ]),\n    _cache[12] || (_cache[12] = _createElementVNode(\"h3\", null, \"-- 測試用例 --\", -1)),\n    _createElementVNode(\"pre\", { class: \"test-block\" }, [\n      _cache[4] || (_cache[4] = _createTextVNode(\"      \")),\n      _createElementVNode(\"code\", { class: \"language-javascript\" }, _toDisplayString(testCodeString)),\n      _cache[5] || (_cache[5] = _createTextVNode(\"\\n    \"))\n    ]),\n    (showModal.value)\n      ? (_openBlock(), _createElementBlock(\"div\", {\n          key: 1,\n          class: \"modal-overlay\",\n          onClick: _withModifiers(closeModal, [\"self\"])\n        }, [\n          _createElementVNode(\"div\", _hoisted_3, [\n            (isLoading.value)\n              ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \"Loading...\"))\n              : _createCommentVNode(\"\", true),\n            _withDirectives(_createElementVNode(\"img\", {\n              src: imageSrc.value,\n              alt: \"node-picture\",\n              onLoad: onLoadSuccess,\n              onError: onLoadError\n            }, null, 40, _hoisted_5), [\n              [_vShow, !isLoading.value]\n            ]),\n            _createElementVNode(\"button\", {\n              class: \"close-button\",\n              onClick: closeModal\n            }, \"Close\")\n          ])\n        ]))\n      : _createCommentVNode(\"\", true)\n  ]))\n}\n}\n\n})","<template>\r\n  <div class=\"problem-detail\">\r\n    <!-- 關閉按鈕 -->\r\n    <button class=\"close-btn\" @click=\"$emit('close')\">&times;</button>\r\n\r\n    <!-- 題目標題 -->\r\n    <h2>BFS / DFS</h2>\r\n    <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\" target=\"_blank\">\r\n      (wiki - BFS)\r\n    </a>\r\n    <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\" target=\"_blank\">\r\n      (wiki - DFS)\r\n    </a>\r\n    <p>\r\n      <strong>問題:</strong>\r\n       Graph Traversal\r\n    </p>\r\n    <div v-if=\"showMore\">\r\n      <p>根據節點圖，從節點 1 開始，以下面兩種走訪方式印出節點。</p>\r\n      <p>1. 廣度優先 (Breadth-First Search, BFS)</p>\r\n      <p>2.深度優先 (Depth-First Search, DFS)</p>\r\n    </div>\r\n    <button id=\"toggleShowMoreButton\" @click=\"toggleShowMore\">\r\n      {{ showMore ? '(Hide)' : 'Click to Show More ↓' }}\r\n    </button>\r\n\r\n    <br>\r\n    <!-- <img src=\"../../assets/BFSAndDFS.png\"> -->\r\n    <button id=\"showModalButton\" @click=\"openModal\">節點圖</button>\r\n\r\n    <!-- 我的解答 -->\r\n    <h3>-- 我的解答 --</h3>\r\n    <pre class=\"code-block\">\r\n      <code class=\"language-javascript\">{{ codeString }}</code>\r\n    </pre>\r\n\r\n    <!-- 測試用例 -->\r\n    <h3>-- 測試用例 --</h3>\r\n    <pre class=\"test-block\">\r\n      <code class=\"language-javascript\">{{ testCodeString }}</code>\r\n    </pre>\r\n\r\n    <!-- Modal -->\r\n    <!-- 節點圖片顯示 -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\" @click.self=\"closeModal\">\r\n      <div class=\"modal-content\">\r\n        <!-- Loading 狀態 -->\r\n        <div v-if=\"isLoading\" class=\"loading-spinner\">Loading...</div>\r\n        <!-- 顯示圖片 -->\r\n        <img \r\n          v-show=\"!isLoading\"\r\n          :src=\"imageSrc\" \r\n          alt=\"node-picture\" \r\n          @load=\"onLoadSuccess\"\r\n          @error=\"onLoadError\"\r\n        >\r\n        <button class=\"close-button\" @click=\"closeModal\">Close</button>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted } from 'vue';\r\nimport Prism from 'prismjs';\r\n\r\n// 直接載入圖片\r\nimport BFSAndDFS from '@/assets/BFSAndDFS.png';\r\n\r\nonMounted(() => {\r\n  // Activate Prism.js syntax highlighting\r\n  Prism.highlightAll();\r\n});\r\n\r\n// Reactive references\r\nconst showMore = ref(false);\r\nconst showModal = ref(false);\r\nconst isLoading = ref(false);\r\nconst imageSrc = ref<string>(\"\");\r\n\r\n// Toggle show more/less content\r\nconst toggleShowMore = (): void => {\r\n  showMore.value = !showMore.value;\r\n};\r\n\r\n// Close the modal and reset states\r\nconst closeModal = (): void => {\r\n  showModal.value = false;\r\n  isLoading.value = false;\r\n  imageSrc.value = \"\"; // Reset the image source\r\n};\r\n\r\n// Handle successful image loading\r\nconst onLoadSuccess = (): void => {\r\n  isLoading.value = false; // Disable loading indicator\r\n};\r\n\r\n// Handle image loading errors\r\nconst onLoadError = (): void => {\r\n  isLoading.value = false; // Disable loading indicator\r\n  imageSrc.value = \"https://via.placeholder.com/600x400?text=Image+Not+Found\"; // Fallback image\r\n};\r\n\r\n// Open modal and set the image source\r\nconst openModal = (): void => {\r\n  showModal.value = true;\r\n  isLoading.value = true;\r\n  imageSrc.value = BFSAndDFS;\r\n};\r\n\r\nconst codeString = `\r\n/* \r\n  模仿 API 資料串接\r\n  fetchNeighbours(1).then((data) => {console.log(data);}).catch((error) => {console.error(error);});\r\n  -> Output; [ 2, 3, 4 ]\r\n*/\r\nconst fakeData: Record<string, number[]> = {\r\n    \"1\": [2, 3, 4],\r\n    \"2\": [1, 5],\r\n    \"3\": [1, 5],\r\n    \"4\": [1, 6],\r\n    \"5\": [2, 3, 7],\r\n    \"6\": [4, 7],\r\n    \"7\": [5, 6],\r\n};\r\n\r\nasync function fetchNeighbours(node: number): Promise<number[]> {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(fakeData[node] || []); // Return an empty array if the node doesn't exist\r\n        }, 500); // Simulate network delay\r\n    });\r\n}\r\n\r\n/*\r\n  Assuming the graph has V vertices and E edges:\r\n  Time complexity: O(V + E)\r\n  Space complexity: O(V)\r\n*/\r\n\r\n// BFS 遍歷函數\r\nconst BFS = async (start: number) => {\r\n    const queue = [start];\r\n    const visited = new Set<number>();\r\n    visited.add(start);\r\n\r\n    while (queue.length > 0) {\r\n        const currentNode = queue.shift();\r\n        if (currentNode !== undefined) {\r\n            console.log(currentNode);\r\n\r\n            const neighbours = await fetchNeighbours(currentNode);\r\n\r\n            for (const neighbour of neighbours) {\r\n                if (!visited.has(neighbour)) {\r\n                    queue.push(neighbour);\r\n                    visited.add(neighbour);\r\n                }\r\n            }\r\n            /* FP:\r\n              neighbours.forEach(neighbour => {\r\n                  if (!visited.has(neighbour)) {\r\n                      visited.add(neighbour);\r\n                      queue.push(neighbour);\r\n                  }\r\n              });\r\n            */\r\n        }\r\n    }\r\n};\r\n\r\n// DFS 遍歷函數\r\nconst DFS = async (start: number) => {\r\n    const stack = [start];\r\n    const visited = new Set<number>();\r\n    visited.add(start);\r\n\r\n    while (stack.length > 0) {\r\n        const currentNode = stack.pop();\r\n        console.log(currentNode);\r\n\r\n        const neighbours = await fetchNeighbours(currentNode);\r\n        for (let neighbour of neighbours) {\r\n            if (!visited.has(neighbour)) {\r\n                visited.add(neighbour);\r\n                stack.push(neighbour);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/* 若含失敗率的方式: Fetch API 要配合 try-catch */\r\nasync function fetchNodeNeighborsWithFailure(node) {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (!(node in simulatedData)) {\r\n                reject(new Error(\"The specified node does not exist in the dataset\"));\r\n            } else if (Math.random() < 0.2) {\r\n                reject(new Error(\"A random error occurred while fetching the node data\"));\r\n            } else {\r\n                resolve(simulatedData[node] || []);\r\n            }\r\n        }, 500);\r\n    });\r\n}\r\n`;\r\n\r\nconst testCodeString = `\r\n\r\nBFS(1); // 測試 BFS 從節點 1 開始 Output: 1, 2, 3, 4, 5, 6, 7\r\nDFS(1); // 測試 BFS 從節點 1 開始 Output: 1, 4, 6, 7, 5, 3, 2`;\r\n</script>\r\n\r\n<style scoped>\r\n.problem-detail {\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: rgb(65, 64, 64);\r\n  padding: 24px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);\r\n  width: 70%;\r\n  max-width: 90%;\r\n  color: #f1f1f1;\r\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  overflow-y: auto;\r\n  max-height: 90vh;\r\n}\r\n\r\nh2 {\r\n  font-size: 20px;\r\n  margin-bottom: 0px;\r\n  color: #27ae60;\r\n}\r\n\r\np {\r\n  font-size: 14px;\r\n  line-height: 1.6;\r\n  margin: 10px;\r\n}\r\n\r\nh3 {\r\n  font-size: 16px;\r\n  margin-top: 10px;\r\n  color: #ff9900;\r\n}\r\n\r\na {\r\n  color: #ff9900;\r\n  text-decoration: none;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  transition: color 0.3s ease, text-shadow 0.3s ease;\r\n}\r\n\r\na:hover {\r\n  color: #ffcc00;\r\n  text-shadow: 0 0 8px #ffcc00;\r\n}\r\n\r\na:active {\r\n  color: #ffaa00;\r\n}\r\n\r\n.close-btn {\r\n  position: absolute;\r\n  top: 12px;\r\n  right: 12px;\r\n  background: none;\r\n  border: none;\r\n  font-size: 28px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  color: #ff5555;\r\n  transition: transform 0.2s ease, color 0.2s ease;\r\n}\r\n\r\n.close-btn:hover {\r\n  color: #ff0000;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.code-block {\r\n  border-radius: 10px;\r\n  white-space: pre-wrap;\r\n  font-family: 'Courier New', monospace;\r\n  /* font-family: 'Fira Code', 'Courier New', monospace; */\r\n  max-height: 500px; /* 限制程式碼區塊高度 */\r\n  color: #f8f8f2;\r\n  font-size: 14px;\r\n  overflow-x: auto; /* 水平滾軸 */\r\n  overflow-y: auto; /* 垂直滾軸 */\r\n  border: 1px solid #444;\r\n  text-align: left; /* 確保程式碼區塊靠左對齊 */\r\n}\r\n\r\n/* 美化 code-block 滾動條 */\r\n.code-block::-webkit-scrollbar {\r\n  width: 6px; /* 控制滾動條寬度 */\r\n  height: 6px; /* 控制水平滾動條寬度 */\r\n}\r\n\r\n.code-block::-webkit-scrollbar-track {\r\n  background: #1e1e2f; /* 滾動條背景色 */\r\n  border-radius: 10px;\r\n}\r\n\r\n.code-block::-webkit-scrollbar-thumb {\r\n  background: #ff9900; /* 滾動條滑塊顏色 */\r\n  border-radius: 10px;\r\n}\r\n\r\n.code-block::-webkit-scrollbar-thumb:hover {\r\n  background: #ffcc00; /* 滑鼠懸停時變亮 */\r\n}\r\n\r\n.test-block {\r\n  border-radius: 10px;\r\n  white-space: pre-wrap;\r\n  font-family: 'Courier New', monospace;\r\n  /* font-family: 'Fira Code', 'Courier New', monospace; */\r\n  max-height: 100px; /* 限制程式碼區塊高度 */\r\n  color: #f8f8f2;\r\n  font-size: 14px;\r\n  overflow-x: auto; /* 水平滾軸 */\r\n  overflow-y: auto; /* 垂直滾軸 */\r\n  border: 1px solid #444;\r\n  text-align: left; /* 確保程式碼區塊靠左對齊 */\r\n}\r\n\r\n/* 美化化滾動條樣式 */\r\n.test-block::-webkit-scrollbar {\r\n  width: 10px;\r\n}\r\n\r\n.test-block::-webkit-scrollbar-track {\r\n  background: #1e1e2f;\r\n  border-radius: 10px;\r\n}\r\n\r\n.test-block::-webkit-scrollbar-thumb {\r\n  background: #1a6cb9;\r\n  border-radius: 10px;\r\n  border: 2px solid #1e1e2f;\r\n}\r\n\r\n.test-block::-webkit-scrollbar-thumb:hover {\r\n  background: #11d3e0;\r\n}\r\n\r\npre {\r\n  margin: 0;\r\n  text-align: left; /* 確保 pre 區塊內的文字靠左對齊 */\r\n}\r\n\r\nbutton {\r\n  outline: none;\r\n}\r\n\r\n/* Show More Button Style */\r\n#toggleShowMoreButton {\r\n  background: rgb(65, 64, 64);\r\n  color: black;\r\n  border: none;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  outline: none;\r\n  transition: background-color 0.3s ease, transform 0.2s ease;\r\n}\r\n\r\n#toggleShowMoreButton:hover {\r\n  background-color: #504f4c;\r\n  transform: scale(1.05);\r\n}\r\n\r\n#toggleShowMoreButton:active {\r\n  transform: scale(0.95);\r\n}\r\n\r\n\r\n/* Modal Content */\r\n#showModalButton {\r\n    background-color: #007BFF;\r\n    color: white;\r\n    padding: 2px 4px;\r\n    margin-top: 4px;\r\n    border: none;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n    transition: background-color 0.3s ease;\r\n}\r\n\r\n#showModalButton:hover {\r\n    background-color: #0056b3;\r\n}\r\n\r\n\r\n.problem-detail button:focus {\r\n  outline: 2px solid #ff9900;\r\n}\r\n\r\n/* Modal Overlay */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.8); /* 更深的背景色 */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 9999;\r\n  animation: fadeIn 0.3s ease; /* 添加淡入動畫 */\r\n}\r\n\r\n/* Modal Content */\r\n.modal-content {\r\n  background: linear-gradient(135deg, #047baa, #02919b); /* 添加柔和的漸變背景 */\r\n  border-radius: 15px; /* 圓角調整 */\r\n  padding: 10px;\r\n  max-width: 600px; /* 限制寬度 */\r\n  width: 90%; /* 響應式設計 */\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5); /* 增加深度陰影 */\r\n  text-align: center;\r\n  transform: scale(0.8); /* 初始放大比例 */\r\n  opacity: 0; /* 初始透明度 */\r\n  animation: zoomIn 0.3s ease forwards; /* 添加放大動畫 */\r\n}\r\n\r\n/* Modal Image */\r\n.modal-content img {\r\n  max-width: 100%; /* 確保圖片在小屏幕上正常顯示 */\r\n  height: auto;\r\n  margin: 20px 0;\r\n  border-radius: 10px; /* 增加圖片圓角 */\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); /* 添加陰影 */\r\n}\r\n\r\n/* Close Button */\r\n.close-button {\r\n  background-color: #e74c3c;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 9px 12px; /* 增加按鈕尺寸 */\r\n  cursor: pointer;\r\n  border-radius: 30px; /* 按鈕更圓潤 */\r\n  font-size: 18px;\r\n  transition: background-color 0.3s ease, transform 0.3s ease; /* 添加動態效果 */\r\n}\r\n\r\n.close-button:hover {\r\n  background-color: #c0392b;\r\n  transform: scale(1.1); /* 懸停時放大 */\r\n}\r\n\r\n.loading-spinner {\r\n  color: #000;\r\n  font-size: 24px;\r\n  margin: 20px 0;\r\n  text-align: center;\r\n}\r\n\r\n/* Fade-in Animation */\r\n@keyframes fadeIn {\r\n  from {\r\n    background-color: rgba(0, 0, 0, 0);\r\n  }\r\n  to {\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n  }\r\n}\r\n\r\n/* Zoom-in Animation */\r\n@keyframes zoomIn {\r\n  from {\r\n    transform: scale(0.8); /* 從縮小狀態開始 */\r\n    opacity: 0; /* 從透明開始 */\r\n  }\r\n  to {\r\n    transform: scale(1); /* 放大至正常大小 */\r\n    opacity: 1; /* 顯示 */\r\n  }\r\n}\r\n\r\n@media (max-width: 600px) {\r\n  .problem-detail {\r\n    width: 95%;\r\n    padding: 16px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 18px;\r\n  }\r\n\r\n  .close-btn {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .code-block {\r\n    font-size: 12px;\r\n    max-height: 300px; /* 限制程式碼區塊高度 */\r\n  }\r\n}\r\n</style>\r\n","import script from \"./BFSAndDFS.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./BFSAndDFS.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./BFSAndDFS.vue?vue&type=style&index=0&id=9c5dc7f6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-9c5dc7f6\"]])\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","key","_hoisted_3","_hoisted_4","_hoisted_5","codeString","testCodeString","_defineComponent","__name","setup","__props","onMounted","Prism","showMore","ref","showModal","isLoading","imageSrc","toggleShowMore","value","closeModal","onLoadSuccess","onLoadError","openModal","BFSAndDFS","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","onClick","$event","$emit","href","target","_createTextVNode","_createCommentVNode","id","_toDisplayString","_withModifiers","_withDirectives","src","alt","onLoad","onError","_vShow","__exports__"],"sourceRoot":""}