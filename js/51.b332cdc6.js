"use strict";(self["webpackChunkleetcode"]=self["webpackChunkleetcode"]||[]).push([[51],{3051:function(n,e,t){t.r(e),t.d(e,{default:function(){return p}});var o=t(641),s=t(33),r=t(953),i=t(8848),a=t.n(i);const c={class:"problem-detail"},u={key:0},l='\n/* \n  模仿 API 資料串接\n  fetchNeighbours(1).then((data) => {console.log(data);}).catch((error) => {console.error(error);});\n  -> Output; [ 2, 3, 4 ]\n*/\nconst fakeData: Record<string, number[]> = {\n    "1": [2, 3, 4],\n    "2": [1, 5],\n    "3": [1, 5],\n    "4": [1, 6],\n    "5": [2, 3, 7],\n    "6": [4, 7],\n    "7": [5, 6],\n};\n\nasync function fetchNeighbours(node: number): Promise<number[]> {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(fakeData[node] || []); // Return an empty array if the node doesn\'t exist\n        }, 500); // Simulate network delay\n    });\n}\n\n/*\n  Time complexity: O()\n  Space complexity: O()\n*/\n\n// BFS 遍歷函數\nasync function bfs(start) {\n    const queue = [start];\n    const visited = new Set();\n    visited.add(start);\n\n    while (queue.length > 0) {\n        const currentNode = queue.shift();\n        console.log(currentNode);\n\n        const neighbours = await fetchNeighbours(currentNode);\n\n        for (const neighbour of neighbours) {\n            if (!visited.has(neighbour)) {\n                visited.add(neighbour);\n                queue.push(neighbour);\n            }\n        }\n    }\n}\n\n// DFS 遍歷函數\nasync function dfs(start) {\n    const stack = [start]; // 使用堆疊來模擬深度優先搜索\n    const visited = new Set();\n    visited.add(start);\n\n    while (stack.length > 0) {\n        const currentNode = stack.pop(); // 從堆疊頂部取出節點\n        console.log(currentNode);\n\n        const neighbours = await fetchNeighbours(currentNode);\n\n        for (const neighbour of neighbours) {\n            if (!visited.has(neighbour)) {\n                visited.add(neighbour);\n                stack.push(neighbour); // 將未訪問的鄰居推入堆疊\n            }\n        }\n    }\n}\n\n/*\n  # 優化\n  Time complexity: O()\n  Space complexity: O()\n*/\n\n\n',d="\n// 測試 BFS 從節點 1 開始\nbfs(1); // Output: --\n// 測試 DFS 從節點 1 開始\ndfs(1); // Output: -- ";var h=(0,o.pM)({__name:"BFSAndDFS",setup(n){(0,o.sV)((()=>{a().highlightAll()}));const e=(0,r.KR)(!1),t=()=>{e.value=!e.value};return(n,r)=>((0,o.uX)(),(0,o.CE)("div",c,[(0,o.Lk)("button",{class:"close-btn",onClick:r[0]||(r[0]=e=>n.$emit("close"))},"×"),r[6]||(r[6]=(0,o.Lk)("h2",null,"BFS / DFS",-1)),r[7]||(r[7]=(0,o.Lk)("a",{href:"https://en.wikipedia.org/wiki/Breadth-first_search",target:"_blank"}," (wiki - BFS) ",-1)),r[8]||(r[8]=(0,o.Lk)("a",{href:"https://en.wikipedia.org/wiki/Depth-first_search",target:"_blank"}," (wiki - DFS) ",-1)),r[9]||(r[9]=(0,o.Lk)("p",null,[(0,o.Lk)("strong",null,"問題:"),(0,o.eW)(" 兩個 ")],-1)),e.value?((0,o.uX)(),(0,o.CE)("div",u,r[1]||(r[1]=[(0,o.Lk)("p",null," -- ",-1)]))):(0,o.Q3)("",!0),(0,o.Lk)("button",{id:"toggleShowMoreButton",onClick:t},(0,s.v_)(e.value?"(Hide)":"Click to Show More ↓"),1),r[10]||(r[10]=(0,o.Lk)("h3",null,"-- 我的解答 --",-1)),(0,o.Lk)("pre",{class:"code-block"},[r[2]||(r[2]=(0,o.eW)("      ")),(0,o.Lk)("code",{class:"language-javascript"},(0,s.v_)(l)),r[3]||(r[3]=(0,o.eW)("\n    "))]),r[11]||(r[11]=(0,o.Lk)("h3",null,"-- 測試用例 --",-1)),(0,o.Lk)("pre",{class:"test-block"},[r[4]||(r[4]=(0,o.eW)("      ")),(0,o.Lk)("code",{class:"language-javascript"},(0,s.v_)(d)),r[5]||(r[5]=(0,o.eW)("\n    "))])]))}}),k=t(6262);const g=(0,k.A)(h,[["__scopeId","data-v-fda2ec54"]]);var p=g}}]);
//# sourceMappingURL=51.b332cdc6.js.map